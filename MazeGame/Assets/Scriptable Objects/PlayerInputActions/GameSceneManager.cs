//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scriptable Objects/PlayerInputActions/GameSceneManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameSceneManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameSceneManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameSceneManager"",
    ""maps"": [
        {
            ""name"": ""GameScene"",
            ""id"": ""b7acbcda-e8f4-46a6-ad8d-9785cca55d7c"",
            ""actions"": [
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""d66c3e80-9bde-4176-8871-387f8d9a4386"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6841cd63-bad1-4b05-abaf-77e95b8cf3fe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e13ce25-1fb1-43d7-b2e4-cefd0a0b875e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameScene
        m_GameScene = asset.FindActionMap("GameScene", throwIfNotFound: true);
        m_GameScene_PauseGame = m_GameScene.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameScene
    private readonly InputActionMap m_GameScene;
    private List<IGameSceneActions> m_GameSceneActionsCallbackInterfaces = new List<IGameSceneActions>();
    private readonly InputAction m_GameScene_PauseGame;
    public struct GameSceneActions
    {
        private @GameSceneManager m_Wrapper;
        public GameSceneActions(@GameSceneManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_GameScene_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_GameScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameSceneActions set) { return set.Get(); }
        public void AddCallbacks(IGameSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_GameSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameSceneActionsCallbackInterfaces.Add(instance);
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IGameSceneActions instance)
        {
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IGameSceneActions instance)
        {
            if (m_Wrapper.m_GameSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_GameSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameSceneActions @GameScene => new GameSceneActions(this);
    public interface IGameSceneActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
